plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.23'
    id 'org.gradlex.extra-java-module-info' version '1.12'
}

// 读取配置文件
def xProps = new Properties()
def versionPropsFile = file("${projectDir}/src/main/resources/x.properties")
if (versionPropsFile.exists()) {
    xProps.load(new FileInputStream(versionPropsFile))
} else {
    throw new GradleException("x.properties file not found!")
}
// 获取版本信息
def buildVersion = xProps.getProperty('app-version', '1.0.0')

group 'io.knifer'
version buildVersion

repositories {
    mavenCentral()
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'io.knifer.freebox'
    mainClass = 'io.knifer.freebox.FreeBoxApplication'
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml']
}

ext {
    dv = [
            controlsFX: '11.1.2',
            ikonli: '12.3.1',
            gson: '2.11.0',
            guava: '33.2.1-jre',
            lang3: '3.16.0',
            javaWebSocket: '1.5.7',
            slf4jSimple: '2.1.0-alpha1',
            blockingMap: '0.91',
            vlcjJavaFX: '1.2.0',
            vlcj: '4.8.3',
            filelize: '0.9.5',
            m3uParser: '1.4.0',
            okhttp: '5.0.0-alpha.14',
            hutoolAll: '5.8.27',
            jsoup: '1.15.3',
            jsoupXpath: '2.5.1',
            json: '20250517',
            zxingCore: '3.5.3',
            lombok: '1.18.34',
            junit: '5.9.2'
    ]
}

dependencies {
    implementation "org.controlsfx:controlsfx:${dv.controlsFX}"
    implementation "org.kordamp.ikonli:ikonli-javafx:${dv.ikonli}"
    implementation "org.kordamp.ikonli:ikonli-fontawesome-pack:${dv.ikonli}"
    implementation "com.google.code.gson:gson:${dv.gson}"
    implementation "com.google.guava:guava:${dv.guava}"
    implementation "org.apache.commons:commons-lang3:${dv.lang3}"
    implementation "org.java-websocket:Java-WebSocket:${dv.javaWebSocket}"
    implementation "org.slf4j:slf4j-simple:${dv.slf4jSimple}"
    implementation "com.github.sarveswaran-m:util.concurrent.blockingMap:${dv.blockingMap}"
    implementation "uk.co.caprica:vlcj:${dv.vlcj}"
    implementation "uk.co.caprica:vlcj-javafx:${dv.vlcjJavaFX}"
    implementation "io.github.filelize:filelize-java:${dv.filelize}"
    implementation "com.github.bjoernpetersen:m3u-parser:${dv.m3uParser}"
    implementation "com.squareup.okhttp3:okhttp:${dv.okhttp}"
    implementation "cn.hutool:hutool-all:${dv.hutoolAll}"
    implementation "org.jsoup:jsoup:${dv.jsoup}"
    implementation "cn.wanghaomiao:JsoupXpath:${dv.jsoupXpath}"
    implementation "org.json:json:${dv.json}"
    implementation "com.google.zxing:core:${dv.zxingCore}"

    compileOnly "org.projectlombok:lombok:${dv.lombok}"
    annotationProcessor "org.projectlombok:lombok:${dv.lombok}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${dv.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${dv.junit}"
    testCompileOnly "org.projectlombok:lombok:${dv.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${dv.lombok}"
}

extraJavaModuleInfo {
    /* 处理非模块化项目、解决模块化相关问题 */
    // javafx controlsFX
    module('org.openjfx:javafx-base', 'javafx.base') {
        patchRealModule()
        exportAllPackages()
    }
    // okhttp
    module('org.jetbrains.kotlin:kotlin-stdlib', 'kotlin.stdlib') {
        patchRealModule()
        exportAllPackages()
    }
    // filelize
    module('io.github.filelize:filelize-java', 'filelize') {
        requires 'org.slf4j'
        requires 'com.fasterxml.jackson.databind'
        exportAllPackages()
    }
    /* 自动处理非模块化项目 */
    // blockingMap
    automaticModule('com.github.sarveswaran-m:util.concurrent.blockingMap', 'blockingMap4j')
    // 解决google guava相关的编译错误
    automaticModule('com.google.guava:listenablefuture', 'listenablefutureAvoidConflict')
    automaticModule('com.google.code.findbugs:jsr305', 'jsr305')
    // okhttp
    automaticModule('org.jetbrains:annotations', 'annotations')
    // JsoupXpath
    automaticModule('cn.wanghaomiao:JsoupXpath', 'jsoupXpath')
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

clean {
    delete "${projectDir}/jpackage_temp"
}

jar {
    manifest {
        attributes = [
                'Main-Class': application.mainClass
        ]
    }
}

run {
    jvmArgs = ['--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls']
}

gluonfx {
    graalvmHome = 'E:\\StudyTools\\graalvm-ce-java17-22.3.2'
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'FreeBox'
        jvmArgs = [
                "--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls"
        ]
    }
    mergedModule {
        requires 'java.sql'
        requires 'java.logging'
        requires 'jdk.httpserver'
        requires 'jdk.crypto.ec'
        uses 'cn.hutool.core.convert.Converter'
    }
    jpackage.doFirst {
        delete "${projectDir}/jpackage_temp"
    }
    jpackage {
        mainClassName = application.mainClass
        applicationName = launcherName
        installerName = launcherName
        installerType = 'msi'
        appVersion = project.version
        vendor = 'knifer'
        installerOptions = [
                '--verbose',
                '--temp', 'jpackage_temp',
        ]
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            icon = "${projectDir}/resources/logo/FreeBox.ico"
            installerOptions += [
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut',
                    '--win-shortcut-prompt',
                    '--win-upgrade-uuid', '8EA2474F-D1AB-A3A7-CD9A-ED7895F4CAA4',
                    '--resource-dir', "${projectDir}/resources/wix"
            ]
            if ('true' == xProps.get('debug')) {
                imageOptions = ['--win-console']
            }
        } else if (org.gradle.internal.os.OperatingSystem.current().linux) {
            icon = "${projectDir}/resources/logo/FreeBox.png"
            installerOptions += [
                    '--linux-package-name', 'freebox',
                    '--linux-shortcut',
                    '--linux-deb-maintainer', 'knifer@duck.com',
                    '--linux-menu-group', 'AudioVideo;Audio;Video;',
                    '--linux-app-category', 'video;',
                    '--linux-rpm-license-type', 'GPL-3.0-only',
                    '--resource-dir', "${projectDir}/resources/logo"
            ]
        } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = "${projectDir}/resources/logo/FreeBox.icns"
            installerOptions += [
                    '--mac-sign',
                    '--mac-signing-key-user-name', 'knifer',
                    '--mac-app-category', 'public.app-category.video'
            ]
        }
    }
}

jlinkZip {
    group = 'distribution'
}
